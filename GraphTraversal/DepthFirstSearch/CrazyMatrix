//Crazy Matrix
    import java.io.*;
    import java.util.*;
    class TestClass {
        public static void main(String args[] ) throws Exception {
            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
            int n=Integer.parseInt(br.readLine());
            int adj[][]=new int[n][n];
            boolean visited[][]=new boolean[n][n];
            String str[];
            for(int i=0;i<n;i++)
            {
                str=br.readLine().trim().split(" ");
                for(int j=0;j<n;j++)
                {
                    adj[i][j]=Integer.parseInt(str[j]);
                    visited[i][j]=false;
                }
            }
            String ans=traverseMatrix(adj,visited,n);
            if(ans.contains("1") && ans.contains("2"))
            {   
                System.out.println("AMBIGUOUS");
            }
            else if(ans.contains("1"))
            {
                System.out.println("1");
            }
            else if(ans.contains("2"))
            {
                System.out.println("2");
            }
            else 
            {
                System.out.println("0");
            }
     
        }
        public static String traverseMatrix(int adj[][],boolean visited[][],int n)
        {
            Stack<Node> stack=new Stack<Node>();
            int x=0,y=0;
            String str="";
            for(int j=0;j<n && !str.contains("1");j++)
            {
                if(adj[0][j]==1)
                {
                    stack.push(new Node(0,j));
                    visited[0][j]=true;
                    while(!stack.isEmpty())
                    {
                        Node node=stack.pop();
                        x=node.x;
                        y=node.y;
                        if(x==(n-1))
                        {
                            str=str+"1";
                            break;
                        }
                        //NW->North West
                        if((x-1)>=0 && (y-1)>=0)
                        {
                            if(adj[x-1][y-1]==1 && !visited[x-1][y-1])
                            {
                                visited[x-1][y-1]=true;
                                stack.add(new Node(x-1,y-1));
                            }
                        }
                       //NW->North East
                        if((x-1)>=0 && (y+1)<n)
                        {
                            if(adj[x-1][y+1]==1 && !visited[x-1][y+1])
                            {
                                visited[x-1][y+1]=true;
                                stack.add(new Node(x-1,y+1));
                            }
                        } 
                        //SE
                        if((x+1)<n && (y+1)<n)
                        {
                            if(adj[x+1][y+1]==1 && !visited[x+1][y+1])
                            {
                                visited[x+1][y+1]=true;
                                stack.add(new Node(x+1,y+1));
                            }
                        }
                        //SW
                        if((x+1)<n && (y-1)>=0)
                        {
                            if(adj[x+1][y-1]==1 && !visited[x+1][y-1])
                            {
                                visited[x+1][y-1]=true;
                                stack.add(new Node(x+1,y-1));
                            }
                        }
     
                        //W
                        if((x)<n && (y-1)>=0)
                        {
                            if(adj[x][y-1]==1 && !visited[x][y-1])
                            {
                                visited[x][y-1]=true;
                                 stack.add(new Node(x,y-1));
                            }
                        }
                        //East
                        if((x)<n && (y+1)<n)
                        {
                            if(adj[x][y+1]==1 && !visited[x][y+1])
                            {
                                visited[x][y+1]=true;
                                stack.add(new Node(x,y+1));
                            }
                        }
                        //N
                        if((x-1)>=0 && (y)<n)
                        {
                            if(adj[x-1][y]==1 && !visited[x-1][y])
                            {
                                visited[x-1][y]=true;
                                stack.add(new Node(x-1,y));
                            }
                        }
                        //S
                        if((x+1)<n && (y)<n)
                        {
                            if(adj[x+1][y]==1 && !visited[x+1][y])
                            {
                                visited[x+1][y]=true;
                                stack.add(new Node(x+1,y));
                            }
                        }
                    }
                }
            }
     
            stack=new Stack<Node>();
            for(int i=0;i<n && !str.contains("2");i++)
            {
                if(adj[i][0]==2)
                {
                    stack.push(new Node(i,0));
                    visited[i][0]=true;
                    while(!stack.isEmpty())
                    {
                        Node node=stack.pop();
                        x=node.x;
                        y=node.y;
                        if((y)==(n-1))//in last row
                        {
                            str=str+" 2";
                            break;
                        }
                        //NW
                        if((x-1)>=0 && (y-1)>=0)
                        {
                            if(adj[x-1][y-1]==2 && !visited[x-1][y-1])
                            {
                                visited[x-1][y-1]=true;
                                stack.add(new Node(x-1,y-1));
                            }
                        }
                        //NE->North East
                        if((x-1)>=0 && (y+1)<n)
                        {
                            if(adj[x-1][y+1]==2 && !visited[x-1][y+1])
                            {
                                visited[x-1][y+1]=true;
                                stack.add(new Node(x-1,y+1));
                            }
                        } 
                        //SE
                        if((x+1)<n && (y+1)<n)
                        {
                            if(adj[x+1][y+1]==2 && !visited[x+1][y+1])
                            {
                                visited[x+1][y+1]=true;
                                stack.add(new Node(x+1,y+1));
                            }
                        }
                          //SW
                        if((x+1)<n && (y-1)>=0)
                        {
                            if(adj[x+1][y-1]==2 && !visited[x+1][y-1])
                            {
                                visited[x+1][y-1]=true;
                                stack.add(new Node(x+1,y-1));
                            }
                        }
                        //West
                        if((x)<n && (y-1)>=0)
                        {
                            if(adj[x][y-1]==2 && !visited[x][y-1])
                            {
                                visited[x][y-1]=true;
                                stack.add(new Node(x,y-1));
                            }
                        }
                        //East
                        if((x)<n && (y+1)<n)
                        {
                            if(adj[x][y+1]==2 && !visited[x][y+1])
                            {
                                visited[x][y+1]=true;
                                stack.add(new Node(x,y+1));
                            }
                        }
                        //North
                        if((x-1)>=0 && (y)<n)
                        {
                            if(adj[x-1][y]==2 && !visited[x-1][y])
                            {
                                visited[x-1][y]=true;
                                stack.add(new Node(x-1,y));
                            }
                        }
                        if((x+1)<n && (y)<n)
                        {
                            if(adj[x+1][y]==2 && !visited[x+1][y])
                            {
                                visited[x+1][y]=true;
                                stack.add(new Node(x+1,y));
                            }
                        }
                    }
                }
            }
     
            return str;
     
        }
    }
    class Node
    {
        int x;
        int y;
        public Node(int x,int y)
        {
            this.x=x;
            this.y=y;
        }
    }
