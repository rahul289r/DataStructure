/* IMPORTANT: Multiple classes and nested static classes are supported */

import java.io.*;
import java.util.*;

//observation:-
// Write your code here
//graph traversal
//go up down right left
//base condition-> n n  return 1
//bfs,dfs
//used adjacency matrix as it is dense matrix
//used bfs to reach the end

class TomAndJerry {
    public static int count=0;

    public static void main(String args[] ) throws Exception {
        
        // Write your code here
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        int n=Integer.parseInt(br.readLine());
        //Adjacency matrix
        int adj[][]=new int[n][n];
        //To make sure current node is not traversed again .
        boolean visited[][]=new boolean[n][n];
        //boolean adj[][]=new boolean[n][n];
        String str[];
        for(int i=0;i<n;i++)
        {
            str=br.readLine().split(" ");
            for(int j=0;j<n;j++)
            {
                    adj[i][j]=Integer.parseInt(str[j]);
                    visited[i][j]=false;
            }
        }
        noOfways(adj,visited,n,0,0);
        System.out.println(count);

    }
    public static void noOfways(int adj[][],boolean visited[][],int n,int i,int j)
    {
        if(i==n-1 && j==n-1)
            {
                count+=1;
                return ;
            }
        if(visited[i][j] || adj[i][j]==1)
            return ;
        if(i-1>=0 && adj[i-1][j]==0 && !visited[i-1][j])
            {
                visited[i][j]=true;
                //this is done to make sure that it does not traverse back to the same path
                noOfways(adj,visited,n,i-1,j);
                visited[i][j]=false;
            }
        //move down
        if(i+1<n && adj[i+1][j]==0 && !visited[i+1][j])
        {
            visited[i][j]=true;
            noOfways(adj,visited,n,i+1,j);
            visited[i][j]=false;
        }
        //move left
        if(j-1>=0 && adj[i][j-1]==0 && !visited[i][j-1])
        {
            visited[i][j]=true;
            noOfways(adj,visited,n,i,j-1);
            visited[i][j]=false;
        }
        //move right
        if(j+1<n && adj[i][j+1]==0 && !visited[i][j+1])
        {
             visited[i][j]=true;
            noOfways(adj,visited,n,i,j+1);
             visited[i][j]=false;
        }
       
      

    }
}
